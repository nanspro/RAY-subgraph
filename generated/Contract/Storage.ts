// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Storage extends SmartContract {
  static bind(address: Address): Storage {
    return new Storage("Storage", address);
  }

  governanceWalletAddress(): Address {
    let result = super.call("governanceWalletAddress", []);

    return result[0].toAddress();
  }

  try_governanceWalletAddress(): CallResult<Address> {
    let result = super.tryCall("governanceWalletAddress", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getGovernanceWallet(): Address {
    let result = super.call("getGovernanceWallet", []);

    return result[0].toAddress();
  }

  try_getGovernanceWallet(): CallResult<Address> {
    let result = super.tryCall("getGovernanceWallet", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getIsOracle(target: Address): boolean {
    let result = super.call("getIsOracle", [EthereumValue.fromAddress(target)]);

    return result[0].toBoolean();
  }

  try_getIsOracle(target: Address): CallResult<boolean> {
    let result = super.tryCall("getIsOracle", [
      EthereumValue.fromAddress(target)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getContractAddress(contractName: Bytes): Address {
    let result = super.call("getContractAddress", [
      EthereumValue.fromFixedBytes(contractName)
    ]);

    return result[0].toAddress();
  }

  try_getContractAddress(contractName: Bytes): CallResult<Address> {
    let result = super.tryCall("getContractAddress", [
      EthereumValue.fromFixedBytes(contractName)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getVerifier(contractName: Bytes): Address {
    let result = super.call("getVerifier", [
      EthereumValue.fromFixedBytes(contractName)
    ]);

    return result[0].toAddress();
  }

  try_getVerifier(contractName: Bytes): CallResult<Address> {
    let result = super.tryCall("getVerifier", [
      EthereumValue.fromFixedBytes(contractName)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getTokenKey(tokenId: Bytes): Bytes {
    let result = super.call("getTokenKey", [
      EthereumValue.fromFixedBytes(tokenId)
    ]);

    return result[0].toBytes();
  }

  try_getTokenKey(tokenId: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getTokenKey", [
      EthereumValue.fromFixedBytes(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getOpportunities(ray: Bytes): Array<Bytes> {
    let result = super.call("getOpportunities", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toBytesArray();
  }

  try_getOpportunities(ray: Bytes): CallResult<Array<Bytes>> {
    let result = super.tryCall("getOpportunities", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytesArray());
  }

  getPrincipalAddress(ray: Bytes): Address {
    let result = super.call("getPrincipalAddress", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toAddress();
  }

  try_getPrincipalAddress(ray: Bytes): CallResult<Address> {
    let result = super.tryCall("getPrincipalAddress", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getIsERC20(principalAddress: Address): boolean {
    let result = super.call("getIsERC20", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBoolean();
  }

  try_getIsERC20(principalAddress: Address): CallResult<boolean> {
    let result = super.tryCall("getIsERC20", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getMinAmount(principalAddress: Address): BigInt {
    let result = super.call("getMinAmount", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getMinAmount(principalAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getMinAmount", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getRaised(principalAddress: Address): BigInt {
    let result = super.call("getRaised", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getRaised(principalAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getRaised", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBenchmarkRate(principalAddress: Address): BigInt {
    let result = super.call("getBenchmarkRate", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getBenchmarkRate(principalAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getBenchmarkRate", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCumulativeRate(principalAddress: Address): BigInt {
    let result = super.call("getCumulativeRate", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getCumulativeRate(principalAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getCumulativeRate", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getLastUpdatedRate(principalAddress: Address): BigInt {
    let result = super.call("getLastUpdatedRate", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getLastUpdatedRate(principalAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getLastUpdatedRate", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getACPContribution(principalAddress: Address): BigInt {
    let result = super.call("getACPContribution", [
      EthereumValue.fromAddress(principalAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getACPContribution(principalAddress: Address): CallResult<BigInt> {
    let result = super.tryCall("getACPContribution", [
      EthereumValue.fromAddress(principalAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isValidOpportunity(ray: Bytes, opportunityKey: Bytes): boolean {
    let result = super.call("isValidOpportunity", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(opportunityKey)
    ]);

    return result[0].toBoolean();
  }

  try_isValidOpportunity(
    ray: Bytes,
    opportunityKey: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("isValidOpportunity", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(opportunityKey)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getTokenShares(ray: Bytes, tokenId: Bytes): BigInt {
    let result = super.call("getTokenShares", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenShares(ray: Bytes, tokenId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getTokenShares", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCapital(ray: Bytes, tokenId: Bytes): BigInt {
    let result = super.call("getTokenCapital", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenCapital(ray: Bytes, tokenId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getTokenCapital", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAllowance(ray: Bytes, tokenId: Bytes): BigInt {
    let result = super.call("getTokenAllowance", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenAllowance(ray: Bytes, tokenId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getTokenAllowance", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getEntryRate(ray: Bytes, tokenId: Bytes): BigInt {
    let result = super.call("getEntryRate", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getEntryRate(ray: Bytes, tokenId: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getEntryRate", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getOpportunityToken(ray: Bytes, opportunity: Bytes): Bytes {
    let result = super.call("getOpportunityToken", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(opportunity)
    ]);

    return result[0].toBytes();
  }

  try_getOpportunityToken(ray: Bytes, opportunity: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getOpportunityToken", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(opportunity)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getPrincipal(opportunityKey: Bytes): BigInt {
    let result = super.call("getPrincipal", [
      EthereumValue.fromFixedBytes(opportunityKey)
    ]);

    return result[0].toBigInt();
  }

  try_getPrincipal(opportunityKey: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getPrincipal", [
      EthereumValue.fromFixedBytes(opportunityKey)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPausedMode(ray: Bytes): boolean {
    let result = super.call("getPausedMode", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toBoolean();
  }

  try_getPausedMode(ray: Bytes): CallResult<boolean> {
    let result = super.tryCall("getPausedMode", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getRealizedYield(ray: Bytes): BigInt {
    let result = super.call("getRealizedYield", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toBigInt();
  }

  try_getRealizedYield(ray: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getRealizedYield", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawnYield(ray: Bytes): BigInt {
    let result = super.call("getWithdrawnYield", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toBigInt();
  }

  try_getWithdrawnYield(ray: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getWithdrawnYield", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableCapital(ray: Bytes): BigInt {
    let result = super.call("getAvailableCapital", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toBigInt();
  }

  try_getAvailableCapital(ray: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getAvailableCapital", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getShareSupply(ray: Bytes): BigInt {
    let result = super.call("getShareSupply", [
      EthereumValue.fromFixedBytes(ray)
    ]);

    return result[0].toBigInt();
  }

  try_getShareSupply(ray: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getShareSupply", [
      EthereumValue.fromFixedBytes(ray)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBoolean(ray: Bytes, key: Bytes): boolean {
    let result = super.call("getBoolean", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);

    return result[0].toBoolean();
  }

  try_getBoolean(ray: Bytes, key: Bytes): CallResult<boolean> {
    let result = super.tryCall("getBoolean", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getInt(ray: Bytes, key: Bytes): BigInt {
    let result = super.call("getInt", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_getInt(ray: Bytes, key: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getInt", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getUint(ray: Bytes, key: Bytes): BigInt {
    let result = super.call("getUint", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_getUint(ray: Bytes, key: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getUint", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAddress(ray: Bytes, key: Bytes): Address {
    let result = super.call("getAddress", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);

    return result[0].toAddress();
  }

  try_getAddress(ray: Bytes, key: Bytes): CallResult<Address> {
    let result = super.tryCall("getAddress", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getString(ray: Bytes, key: Bytes): string {
    let result = super.call("getString", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);

    return result[0].toString();
  }

  try_getString(ray: Bytes, key: Bytes): CallResult<string> {
    let result = super.tryCall("getString", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getBytes(ray: Bytes, key: Bytes): Bytes {
    let result = super.call("getBytes", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);

    return result[0].toBytes();
  }

  try_getBytes(ray: Bytes, key: Bytes): CallResult<Bytes> {
    let result = super.tryCall("getBytes", [
      EthereumValue.fromFixedBytes(ray),
      EthereumValue.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _governanceWalletAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _dai(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetGovernanceWalletCall extends EthereumCall {
  get inputs(): SetGovernanceWalletCall__Inputs {
    return new SetGovernanceWalletCall__Inputs(this);
  }

  get outputs(): SetGovernanceWalletCall__Outputs {
    return new SetGovernanceWalletCall__Outputs(this);
  }
}

export class SetGovernanceWalletCall__Inputs {
  _call: SetGovernanceWalletCall;

  constructor(call: SetGovernanceWalletCall) {
    this._call = call;
  }

  get newGovernanceWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceWalletCall__Outputs {
  _call: SetGovernanceWalletCall;

  constructor(call: SetGovernanceWalletCall) {
    this._call = call;
  }
}

export class SetOracleCall extends EthereumCall {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get action(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetStorageWrapperContractCall extends EthereumCall {
  get inputs(): SetStorageWrapperContractCall__Inputs {
    return new SetStorageWrapperContractCall__Inputs(this);
  }

  get outputs(): SetStorageWrapperContractCall__Outputs {
    return new SetStorageWrapperContractCall__Outputs(this);
  }
}

export class SetStorageWrapperContractCall__Inputs {
  _call: SetStorageWrapperContractCall;

  constructor(call: SetStorageWrapperContractCall) {
    this._call = call;
  }

  get theStorageWrapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get action(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetStorageWrapperContractCall__Outputs {
  _call: SetStorageWrapperContractCall;

  constructor(call: SetStorageWrapperContractCall) {
    this._call = call;
  }
}

export class SetVerifierCall extends EthereumCall {
  get inputs(): SetVerifierCall__Inputs {
    return new SetVerifierCall__Inputs(this);
  }

  get outputs(): SetVerifierCall__Outputs {
    return new SetVerifierCall__Outputs(this);
  }
}

export class SetVerifierCall__Inputs {
  _call: SetVerifierCall;

  constructor(call: SetVerifierCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetVerifierCall__Outputs {
  _call: SetVerifierCall;

  constructor(call: SetVerifierCall) {
    this._call = call;
  }
}

export class SetContractAddressCall extends EthereumCall {
  get inputs(): SetContractAddressCall__Inputs {
    return new SetContractAddressCall__Inputs(this);
  }

  get outputs(): SetContractAddressCall__Outputs {
    return new SetContractAddressCall__Outputs(this);
  }
}

export class SetContractAddressCall__Inputs {
  _call: SetContractAddressCall;

  constructor(call: SetContractAddressCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetContractAddressCall__Outputs {
  _call: SetContractAddressCall;

  constructor(call: SetContractAddressCall) {
    this._call = call;
  }
}

export class SetTokenKeyCall extends EthereumCall {
  get inputs(): SetTokenKeyCall__Inputs {
    return new SetTokenKeyCall__Inputs(this);
  }

  get outputs(): SetTokenKeyCall__Outputs {
    return new SetTokenKeyCall__Outputs(this);
  }
}

export class SetTokenKeyCall__Inputs {
  _call: SetTokenKeyCall;

  constructor(call: SetTokenKeyCall) {
    this._call = call;
  }

  get tokenId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get ray(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetTokenKeyCall__Outputs {
  _call: SetTokenKeyCall;

  constructor(call: SetTokenKeyCall) {
    this._call = call;
  }
}

export class SetIsERC20Call extends EthereumCall {
  get inputs(): SetIsERC20Call__Inputs {
    return new SetIsERC20Call__Inputs(this);
  }

  get outputs(): SetIsERC20Call__Outputs {
    return new SetIsERC20Call__Outputs(this);
  }
}

export class SetIsERC20Call__Inputs {
  _call: SetIsERC20Call;

  constructor(call: SetIsERC20Call) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isERC20(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsERC20Call__Outputs {
  _call: SetIsERC20Call;

  constructor(call: SetIsERC20Call) {
    this._call = call;
  }
}

export class SetMinAmountCall extends EthereumCall {
  get inputs(): SetMinAmountCall__Inputs {
    return new SetMinAmountCall__Inputs(this);
  }

  get outputs(): SetMinAmountCall__Outputs {
    return new SetMinAmountCall__Outputs(this);
  }
}

export class SetMinAmountCall__Inputs {
  _call: SetMinAmountCall;

  constructor(call: SetMinAmountCall) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinAmountCall__Outputs {
  _call: SetMinAmountCall;

  constructor(call: SetMinAmountCall) {
    this._call = call;
  }
}

export class SetRaisedCall extends EthereumCall {
  get inputs(): SetRaisedCall__Inputs {
    return new SetRaisedCall__Inputs(this);
  }

  get outputs(): SetRaisedCall__Outputs {
    return new SetRaisedCall__Outputs(this);
  }
}

export class SetRaisedCall__Inputs {
  _call: SetRaisedCall;

  constructor(call: SetRaisedCall) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _raised(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRaisedCall__Outputs {
  _call: SetRaisedCall;

  constructor(call: SetRaisedCall) {
    this._call = call;
  }
}

export class SetBenchmarkRateCall extends EthereumCall {
  get inputs(): SetBenchmarkRateCall__Inputs {
    return new SetBenchmarkRateCall__Inputs(this);
  }

  get outputs(): SetBenchmarkRateCall__Outputs {
    return new SetBenchmarkRateCall__Outputs(this);
  }
}

export class SetBenchmarkRateCall__Inputs {
  _call: SetBenchmarkRateCall;

  constructor(call: SetBenchmarkRateCall) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newBenchmarkRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBenchmarkRateCall__Outputs {
  _call: SetBenchmarkRateCall;

  constructor(call: SetBenchmarkRateCall) {
    this._call = call;
  }
}

export class SetCumulativeRateCall extends EthereumCall {
  get inputs(): SetCumulativeRateCall__Inputs {
    return new SetCumulativeRateCall__Inputs(this);
  }

  get outputs(): SetCumulativeRateCall__Outputs {
    return new SetCumulativeRateCall__Outputs(this);
  }
}

export class SetCumulativeRateCall__Inputs {
  _call: SetCumulativeRateCall;

  constructor(call: SetCumulativeRateCall) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCumulativeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCumulativeRateCall__Outputs {
  _call: SetCumulativeRateCall;

  constructor(call: SetCumulativeRateCall) {
    this._call = call;
  }
}

export class SetLastUpdatedRateCall extends EthereumCall {
  get inputs(): SetLastUpdatedRateCall__Inputs {
    return new SetLastUpdatedRateCall__Inputs(this);
  }

  get outputs(): SetLastUpdatedRateCall__Outputs {
    return new SetLastUpdatedRateCall__Outputs(this);
  }
}

export class SetLastUpdatedRateCall__Inputs {
  _call: SetLastUpdatedRateCall;

  constructor(call: SetLastUpdatedRateCall) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newLastUpdatedRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLastUpdatedRateCall__Outputs {
  _call: SetLastUpdatedRateCall;

  constructor(call: SetLastUpdatedRateCall) {
    this._call = call;
  }
}

export class SetACPContributionCall extends EthereumCall {
  get inputs(): SetACPContributionCall__Inputs {
    return new SetACPContributionCall__Inputs(this);
  }

  get outputs(): SetACPContributionCall__Outputs {
    return new SetACPContributionCall__Outputs(this);
  }
}

export class SetACPContributionCall__Inputs {
  _call: SetACPContributionCall;

  constructor(call: SetACPContributionCall) {
    this._call = call;
  }

  get principalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newACPContribution(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetACPContributionCall__Outputs {
  _call: SetACPContributionCall;

  constructor(call: SetACPContributionCall) {
    this._call = call;
  }
}

export class DeleteTokenValuesCall extends EthereumCall {
  get inputs(): DeleteTokenValuesCall__Inputs {
    return new DeleteTokenValuesCall__Inputs(this);
  }

  get outputs(): DeleteTokenValuesCall__Outputs {
    return new DeleteTokenValuesCall__Outputs(this);
  }
}

export class DeleteTokenValuesCall__Inputs {
  _call: DeleteTokenValuesCall;

  constructor(call: DeleteTokenValuesCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeleteTokenValuesCall__Outputs {
  _call: DeleteTokenValuesCall;

  constructor(call: DeleteTokenValuesCall) {
    this._call = call;
  }
}

export class AddOpportunityCall extends EthereumCall {
  get inputs(): AddOpportunityCall__Inputs {
    return new AddOpportunityCall__Inputs(this);
  }

  get outputs(): AddOpportunityCall__Outputs {
    return new AddOpportunityCall__Outputs(this);
  }
}

export class AddOpportunityCall__Inputs {
  _call: AddOpportunityCall;

  constructor(call: AddOpportunityCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get opportunityKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _principalAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddOpportunityCall__Outputs {
  _call: AddOpportunityCall;

  constructor(call: AddOpportunityCall) {
    this._call = call;
  }
}

export class SetPrincipalAddressCall extends EthereumCall {
  get inputs(): SetPrincipalAddressCall__Inputs {
    return new SetPrincipalAddressCall__Inputs(this);
  }

  get outputs(): SetPrincipalAddressCall__Outputs {
    return new SetPrincipalAddressCall__Outputs(this);
  }
}

export class SetPrincipalAddressCall__Inputs {
  _call: SetPrincipalAddressCall;

  constructor(call: SetPrincipalAddressCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _principalAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPrincipalAddressCall__Outputs {
  _call: SetPrincipalAddressCall;

  constructor(call: SetPrincipalAddressCall) {
    this._call = call;
  }
}

export class SetValidOpportunityCall extends EthereumCall {
  get inputs(): SetValidOpportunityCall__Inputs {
    return new SetValidOpportunityCall__Inputs(this);
  }

  get outputs(): SetValidOpportunityCall__Outputs {
    return new SetValidOpportunityCall__Outputs(this);
  }
}

export class SetValidOpportunityCall__Inputs {
  _call: SetValidOpportunityCall;

  constructor(call: SetValidOpportunityCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get opportunityKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetValidOpportunityCall__Outputs {
  _call: SetValidOpportunityCall;

  constructor(call: SetValidOpportunityCall) {
    this._call = call;
  }
}

export class SetTokenSharesCall extends EthereumCall {
  get inputs(): SetTokenSharesCall__Inputs {
    return new SetTokenSharesCall__Inputs(this);
  }

  get outputs(): SetTokenSharesCall__Outputs {
    return new SetTokenSharesCall__Outputs(this);
  }
}

export class SetTokenSharesCall__Inputs {
  _call: SetTokenSharesCall;

  constructor(call: SetTokenSharesCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tokenShares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetTokenSharesCall__Outputs {
  _call: SetTokenSharesCall;

  constructor(call: SetTokenSharesCall) {
    this._call = call;
  }
}

export class SetTokenCapitalCall extends EthereumCall {
  get inputs(): SetTokenCapitalCall__Inputs {
    return new SetTokenCapitalCall__Inputs(this);
  }

  get outputs(): SetTokenCapitalCall__Outputs {
    return new SetTokenCapitalCall__Outputs(this);
  }
}

export class SetTokenCapitalCall__Inputs {
  _call: SetTokenCapitalCall;

  constructor(call: SetTokenCapitalCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tokenCapital(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetTokenCapitalCall__Outputs {
  _call: SetTokenCapitalCall;

  constructor(call: SetTokenCapitalCall) {
    this._call = call;
  }
}

export class SetTokenAllowanceCall extends EthereumCall {
  get inputs(): SetTokenAllowanceCall__Inputs {
    return new SetTokenAllowanceCall__Inputs(this);
  }

  get outputs(): SetTokenAllowanceCall__Outputs {
    return new SetTokenAllowanceCall__Outputs(this);
  }
}

export class SetTokenAllowanceCall__Inputs {
  _call: SetTokenAllowanceCall;

  constructor(call: SetTokenAllowanceCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tokenAllowance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetTokenAllowanceCall__Outputs {
  _call: SetTokenAllowanceCall;

  constructor(call: SetTokenAllowanceCall) {
    this._call = call;
  }
}

export class SetEntryRateCall extends EthereumCall {
  get inputs(): SetEntryRateCall__Inputs {
    return new SetEntryRateCall__Inputs(this);
  }

  get outputs(): SetEntryRateCall__Outputs {
    return new SetEntryRateCall__Outputs(this);
  }
}

export class SetEntryRateCall__Inputs {
  _call: SetEntryRateCall;

  constructor(call: SetEntryRateCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get entryRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetEntryRateCall__Outputs {
  _call: SetEntryRateCall;

  constructor(call: SetEntryRateCall) {
    this._call = call;
  }
}

export class SetOpportunityTokenCall extends EthereumCall {
  get inputs(): SetOpportunityTokenCall__Inputs {
    return new SetOpportunityTokenCall__Inputs(this);
  }

  get outputs(): SetOpportunityTokenCall__Outputs {
    return new SetOpportunityTokenCall__Outputs(this);
  }
}

export class SetOpportunityTokenCall__Inputs {
  _call: SetOpportunityTokenCall;

  constructor(call: SetOpportunityTokenCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get opportunity(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tokenId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetOpportunityTokenCall__Outputs {
  _call: SetOpportunityTokenCall;

  constructor(call: SetOpportunityTokenCall) {
    this._call = call;
  }
}

export class SetPrincipalCall extends EthereumCall {
  get inputs(): SetPrincipalCall__Inputs {
    return new SetPrincipalCall__Inputs(this);
  }

  get outputs(): SetPrincipalCall__Outputs {
    return new SetPrincipalCall__Outputs(this);
  }
}

export class SetPrincipalCall__Inputs {
  _call: SetPrincipalCall;

  constructor(call: SetPrincipalCall) {
    this._call = call;
  }

  get opportunityKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get principalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPrincipalCall__Outputs {
  _call: SetPrincipalCall;

  constructor(call: SetPrincipalCall) {
    this._call = call;
  }
}

export class SetPausedOnCall extends EthereumCall {
  get inputs(): SetPausedOnCall__Inputs {
    return new SetPausedOnCall__Inputs(this);
  }

  get outputs(): SetPausedOnCall__Outputs {
    return new SetPausedOnCall__Outputs(this);
  }
}

export class SetPausedOnCall__Inputs {
  _call: SetPausedOnCall;

  constructor(call: SetPausedOnCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetPausedOnCall__Outputs {
  _call: SetPausedOnCall;

  constructor(call: SetPausedOnCall) {
    this._call = call;
  }
}

export class SetPausedOffCall extends EthereumCall {
  get inputs(): SetPausedOffCall__Inputs {
    return new SetPausedOffCall__Inputs(this);
  }

  get outputs(): SetPausedOffCall__Outputs {
    return new SetPausedOffCall__Outputs(this);
  }
}

export class SetPausedOffCall__Inputs {
  _call: SetPausedOffCall;

  constructor(call: SetPausedOffCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetPausedOffCall__Outputs {
  _call: SetPausedOffCall;

  constructor(call: SetPausedOffCall) {
    this._call = call;
  }
}

export class SetRealizedYieldCall extends EthereumCall {
  get inputs(): SetRealizedYieldCall__Inputs {
    return new SetRealizedYieldCall__Inputs(this);
  }

  get outputs(): SetRealizedYieldCall__Outputs {
    return new SetRealizedYieldCall__Outputs(this);
  }
}

export class SetRealizedYieldCall__Inputs {
  _call: SetRealizedYieldCall;

  constructor(call: SetRealizedYieldCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newRealizedYield(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRealizedYieldCall__Outputs {
  _call: SetRealizedYieldCall;

  constructor(call: SetRealizedYieldCall) {
    this._call = call;
  }
}

export class SetWithdrawnYieldCall extends EthereumCall {
  get inputs(): SetWithdrawnYieldCall__Inputs {
    return new SetWithdrawnYieldCall__Inputs(this);
  }

  get outputs(): SetWithdrawnYieldCall__Outputs {
    return new SetWithdrawnYieldCall__Outputs(this);
  }
}

export class SetWithdrawnYieldCall__Inputs {
  _call: SetWithdrawnYieldCall;

  constructor(call: SetWithdrawnYieldCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newWithdrawnYield(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetWithdrawnYieldCall__Outputs {
  _call: SetWithdrawnYieldCall;

  constructor(call: SetWithdrawnYieldCall) {
    this._call = call;
  }
}

export class SetAvailableCapitalCall extends EthereumCall {
  get inputs(): SetAvailableCapitalCall__Inputs {
    return new SetAvailableCapitalCall__Inputs(this);
  }

  get outputs(): SetAvailableCapitalCall__Outputs {
    return new SetAvailableCapitalCall__Outputs(this);
  }
}

export class SetAvailableCapitalCall__Inputs {
  _call: SetAvailableCapitalCall;

  constructor(call: SetAvailableCapitalCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newAvailableCapital(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAvailableCapitalCall__Outputs {
  _call: SetAvailableCapitalCall;

  constructor(call: SetAvailableCapitalCall) {
    this._call = call;
  }
}

export class SetShareSupplyCall extends EthereumCall {
  get inputs(): SetShareSupplyCall__Inputs {
    return new SetShareSupplyCall__Inputs(this);
  }

  get outputs(): SetShareSupplyCall__Outputs {
    return new SetShareSupplyCall__Outputs(this);
  }
}

export class SetShareSupplyCall__Inputs {
  _call: SetShareSupplyCall;

  constructor(call: SetShareSupplyCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newShareSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetShareSupplyCall__Outputs {
  _call: SetShareSupplyCall;

  constructor(call: SetShareSupplyCall) {
    this._call = call;
  }
}

export class SetBooleanCall extends EthereumCall {
  get inputs(): SetBooleanCall__Inputs {
    return new SetBooleanCall__Inputs(this);
  }

  get outputs(): SetBooleanCall__Outputs {
    return new SetBooleanCall__Outputs(this);
  }
}

export class SetBooleanCall__Inputs {
  _call: SetBooleanCall;

  constructor(call: SetBooleanCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetBooleanCall__Outputs {
  _call: SetBooleanCall;

  constructor(call: SetBooleanCall) {
    this._call = call;
  }
}

export class SetIntCall extends EthereumCall {
  get inputs(): SetIntCall__Inputs {
    return new SetIntCall__Inputs(this);
  }

  get outputs(): SetIntCall__Outputs {
    return new SetIntCall__Outputs(this);
  }
}

export class SetIntCall__Inputs {
  _call: SetIntCall;

  constructor(call: SetIntCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetIntCall__Outputs {
  _call: SetIntCall;

  constructor(call: SetIntCall) {
    this._call = call;
  }
}

export class SetUintCall extends EthereumCall {
  get inputs(): SetUintCall__Inputs {
    return new SetUintCall__Inputs(this);
  }

  get outputs(): SetUintCall__Outputs {
    return new SetUintCall__Outputs(this);
  }
}

export class SetUintCall__Inputs {
  _call: SetUintCall;

  constructor(call: SetUintCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetUintCall__Outputs {
  _call: SetUintCall;

  constructor(call: SetUintCall) {
    this._call = call;
  }
}

export class SetAddressCall extends EthereumCall {
  get inputs(): SetAddressCall__Inputs {
    return new SetAddressCall__Inputs(this);
  }

  get outputs(): SetAddressCall__Outputs {
    return new SetAddressCall__Outputs(this);
  }
}

export class SetAddressCall__Inputs {
  _call: SetAddressCall;

  constructor(call: SetAddressCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetAddressCall__Outputs {
  _call: SetAddressCall;

  constructor(call: SetAddressCall) {
    this._call = call;
  }
}

export class SetStringCall extends EthereumCall {
  get inputs(): SetStringCall__Inputs {
    return new SetStringCall__Inputs(this);
  }

  get outputs(): SetStringCall__Outputs {
    return new SetStringCall__Outputs(this);
  }
}

export class SetStringCall__Inputs {
  _call: SetStringCall;

  constructor(call: SetStringCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetStringCall__Outputs {
  _call: SetStringCall;

  constructor(call: SetStringCall) {
    this._call = call;
  }
}

export class SetBytesCall extends EthereumCall {
  get inputs(): SetBytesCall__Inputs {
    return new SetBytesCall__Inputs(this);
  }

  get outputs(): SetBytesCall__Outputs {
    return new SetBytesCall__Outputs(this);
  }
}

export class SetBytesCall__Inputs {
  _call: SetBytesCall;

  constructor(call: SetBytesCall) {
    this._call = call;
  }

  get ray(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetBytesCall__Outputs {
  _call: SetBytesCall;

  constructor(call: SetBytesCall) {
    this._call = call;
  }
}
